pipeline {
    agent any
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'your-credentials-id', url: 'https://github.com/your-repo-url.git'
            }
        }
        stage('Build Python Code') {
            steps {
                sh 'python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt'
            }
        }
        stage('SonarQube Scan') {
            environment {
                SONAR_SCANNER_HOME = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${env.SONAR_SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=your-project-key"
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
    post {
        success {
            script {
                githubNotify context: 'Build and SonarQube Analysis', status: 'SUCCESS', description: 'Build and analysis successful!'
            }
        }
        failure {
            script {
                githubNotify context: 'Build and SonarQube Analysis', status: 'FAILURE', description: 'Build or analysis failed!'
            }
        }
    }
}
